"use strict";var F=Object.defineProperty;var U=(o,e,t)=>e in o?F(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var h=(o,e,t)=>(U(o,typeof e!="symbol"?e+"":e,t),t);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const a=require("electron"),C=require("node:module"),x=require("node:url"),d=require("node:path"),k=require("better-sqlite3"),N=require("path"),l=require("fs");var m=typeof document<"u"?document.currentScript:null;const i=[];for(let o=0;o<256;++o)i.push((o+256).toString(16).slice(1));function $(o,e=0){return(i[o[e+0]]+i[o[e+1]]+i[o[e+2]]+i[o[e+3]]+"-"+i[o[e+4]]+i[o[e+5]]+"-"+i[o[e+6]]+i[o[e+7]]+"-"+i[o[e+8]]+i[o[e+9]]+"-"+i[o[e+10]]+i[o[e+11]]+i[o[e+12]]+i[o[e+13]]+i[o[e+14]]+i[o[e+15]]).toLowerCase()}let S;const j=new Uint8Array(16);function V(){if(!S){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");S=crypto.getRandomValues.bind(crypto)}return S(j)}const q=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),v={randomUUID:q};function L(o,e,t){var n;if(v.randomUUID&&!e&&!o)return v.randomUUID();o=o||{};const r=o.random??((n=o.rng)==null?void 0:n.call(o))??V();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){if(t=t||0,t<0||t+16>e.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let s=0;s<16;++s)e[t+s]=r[s];return e}return $(r)}const u=class u{constructor(){h(this,"db");try{console.log("DatabaseManager: Initializing database");const e=a.app.getPath("userData");console.log(`DatabaseManager: User data path: ${e}`);const t=N.join(e,"memoka.db");console.log(`DatabaseManager: Database path: ${t}`),l.existsSync(e)||(console.log(`DatabaseManager: Creating directory: ${e}`),l.mkdirSync(e,{recursive:!0}));try{const r=N.join(e,"test.txt");l.writeFileSync(r,"test"),l.unlinkSync(r),console.log("DatabaseManager: Write permission check passed")}catch(r){console.error("DatabaseManager: Write permission check failed:",r)}console.log("DatabaseManager: Creating database connection"),this.db=new k(t,{verbose:console.log}),console.log("DatabaseManager: Database connection created"),this.init(),console.log("DatabaseManager: Database initialized successfully")}catch(e){throw console.error("DatabaseManager: Error initializing database:",e),e}}static getInstance(){return u.instance||(console.log("DatabaseManager: Creating new instance"),u.instance=new u),u.instance}init(){try{console.log("DatabaseManager.init: Creating tables if they do not exist"),this.db.pragma("foreign_keys = ON"),console.log("DatabaseManager.init: Creating tables"),this.db.transaction(()=>{console.log("DatabaseManager.init: Creating notes table"),this.db.exec(`
          CREATE TABLE IF NOT EXISTS notes (
            id TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            created_at INTEGER NOT NULL,
            updated_at INTEGER NOT NULL
          )
        `),console.log("DatabaseManager.init: Creating tags table"),this.db.exec(`
          CREATE TABLE IF NOT EXISTS tags (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL UNIQUE
          )
        `),console.log("DatabaseManager.init: Creating note_tags table"),this.db.exec(`
          CREATE TABLE IF NOT EXISTS note_tags (
            note_id TEXT NOT NULL,
            tag_id TEXT NOT NULL,
            PRIMARY KEY (note_id, tag_id),
            FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
            FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
          )
        `)})(),console.log("DatabaseManager.init: Tables created successfully");try{const t="test-note-"+Date.now(),r=Date.now();console.log("DatabaseManager.init: Creating test note"),this.db.prepare(`
          INSERT INTO notes (id, title, content, created_at, updated_at)
          VALUES (?, ?, ?, ?, ?)
        `).run(t,"Test Note","This is a test note",r,r),console.log("DatabaseManager.init: Test note created successfully");const n=this.db.prepare("SELECT * FROM notes WHERE id = ?").get(t);console.log("DatabaseManager.init: Test note retrieved:",n)}catch(t){console.error("Error creating test note:",t)}const e=this.db.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();console.log("DatabaseManager.init: Tables created:",e.map(t=>t.name).join(", "))}catch(e){throw console.error("DatabaseManager.init: Error creating tables:",e),e}}getDb(){return this.db}close(){try{console.log("DatabaseManager: Closing database connection"),this.db.close(),console.log("DatabaseManager: Database connection closed")}catch(e){console.error("DatabaseManager: Error closing database:",e)}}};h(u,"instance");let f=u;class O{constructor(){h(this,"db",f.getInstance().getDb())}findAll(){try{console.log("NoteRepository.findAll: Preparing SQL statement");const e=this.db.prepare(`
        SELECT id, title, content, created_at as createdAt, updated_at as updatedAt
        FROM notes
        ORDER BY updated_at DESC
      `);console.log("NoteRepository.findAll: Executing SQL statement");const t=e.all();console.log(`NoteRepository.findAll: Found ${t.length} notes`),console.log("NoteRepository.findAll: Getting tags for notes");const r=t.map(n=>{const s=this.getTagsForNote(n.id);return{...n,tags:s}});return console.log("NoteRepository.findAll: Returning notes with tags"),r}catch(e){throw console.error("Error in NoteRepository.findAll:",e),e}}findById(e){const r=this.db.prepare(`
      SELECT id, title, content, created_at as createdAt, updated_at as updatedAt
      FROM notes
      WHERE id = ?
    `).get(e);if(!r)return null;const n=this.getTagsForNote(e);return{...r,tags:n}}create(e){var t;try{console.log("NoteRepository.create: Starting note creation");const r=L(),n=Date.now();console.log("NoteRepository.create: Preparing SQL statement");const s=this.db.prepare(`
        INSERT INTO notes (id, title, content, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?)
      `);return console.log("NoteRepository.create: Executing SQL statement with params:",{id:r,title:e.title,contentLength:((t=e.content)==null?void 0:t.length)||0,now:n}),s.run(r,e.title,e.content||"",n,n),console.log("NoteRepository.create: Saving tags"),this.saveTags(r,e.tags),console.log("NoteRepository.create: Note created successfully"),{id:r,title:e.title,content:e.content||"",createdAt:new Date(n),updatedAt:new Date(n),tags:e.tags}}catch(r){throw console.error("Error in NoteRepository.create:",r),r}}update(e,t){const r=this.findById(e);if(!r)return null;const n=Date.now(),s={...r,...t,updatedAt:new Date(n)};return this.db.prepare(`
      UPDATE notes
      SET title = ?, content = ?, updated_at = ?
      WHERE id = ?
    `).run(s.title,s.content,n,e),t.tags&&this.saveTags(e,t.tags),s}delete(e){return this.db.prepare("DELETE FROM notes WHERE id = ?").run(e).changes>0}getTagsForNote(e){return this.db.prepare(`
      SELECT t.name
      FROM tags t
      JOIN note_tags nt ON t.id = nt.tag_id
      WHERE nt.note_id = ?
    `).all(e).map(n=>n.name)}saveTags(e,t){try{if(console.log(`NoteRepository.saveTags: Starting to save tags for note ${e}`),console.log(`NoteRepository.saveTags: Tags to save: ${JSON.stringify(t)}`),console.log("NoteRepository.saveTags: Deleting existing note-tag relationships"),this.db.prepare("DELETE FROM note_tags WHERE note_id = ?").run(e),t.length===0){console.log("NoteRepository.saveTags: No tags to save, returning");return}console.log("NoteRepository.saveTags: Preparing SQL statements for tag insertion");const n=this.db.prepare("INSERT OR IGNORE INTO tags (id, name) VALUES (?, ?)"),s=this.db.prepare("INSERT INTO note_tags (note_id, tag_id) VALUES (?, ?)");console.log("NoteRepository.saveTags: Creating transaction for tag insertion");const c=this.db.transaction(p=>{console.log(`NoteRepository.saveTags: Processing ${p.length} tags in transaction`);for(const g of p){const w=L();console.log(`NoteRepository.saveTags: Inserting tag "${g}" with ID ${w}`),n.run(w,g),console.log(`NoteRepository.saveTags: Getting tag ID for "${g}"`);const I=this.db.prepare("SELECT id FROM tags WHERE name = ?").get(g);if(!I)throw console.error(`NoteRepository.saveTags: Failed to get tag ID for "${g}"`),new Error(`Failed to get tag ID for "${g}"`);console.log(`NoteRepository.saveTags: Linking note ${e} with tag ${I.id}`),s.run(e,I.id)}console.log("NoteRepository.saveTags: Transaction completed successfully")});console.log("NoteRepository.saveTags: Executing transaction"),c(t),console.log("NoteRepository.saveTags: Tags saved successfully")}catch(r){throw console.error("Error in NoteRepository.saveTags:",r),r}}}const D=class D{static async readFile(e){try{return await l.promises.readFile(e,"utf-8")}catch(t){throw console.error("Error reading file:",t),t}}static async writeFile(e,t){try{const r=N.dirname(e);await l.promises.mkdir(r,{recursive:!0}),await l.promises.writeFile(e,t,"utf-8")}catch(r){throw console.error("Error writing file:",r),r}}static async deleteFile(e){try{await l.promises.unlink(e)}catch(t){throw console.error("Error deleting file:",t),t}}static async listFiles(e){try{return await l.promises.readdir(e)}catch(t){throw console.error("Error listing files:",t),t}}static getAppDataPath(e=""){return N.join(D.userDataPath,e)}};h(D,"userDataPath",a.app.getPath("userData"));let T=D;class H{constructor(){h(this,"noteRepository",new O)}async exportNotes(e){const t=this.noteRepository.findAll(),r=JSON.stringify(t,null,2);await T.writeFile(e,r)}async importNotes(e){const t=await T.readFile(e),r=JSON.parse(t),n=[];for(const s of r){const c=this.noteRepository.create(s);n.push(c)}return n}async exportNoteAsMarkdown(e,t){const r=this.convertNoteToMarkdown(e);await T.writeFile(t,r)}convertNoteToMarkdown(e){const t=`# ${e.title}

`,r=e.tags.length>0?`Tags: ${e.tags.join(", ")}

`:"",n=e.content;return`${t}${r}${n}`}}const E=new O,M=new H;function W(){a.ipcMain.handle("notes:getAll",async()=>{try{console.log("ipcHandlers: Getting all notes");const o=E.findAll();return console.log("ipcHandlers: Got notes:",o),o}catch(o){throw console.error("Error getting all notes:",o),o instanceof Error&&(console.error("Error message:",o.message),console.error("Error stack:",o.stack)),o}}),a.ipcMain.handle("notes:getById",async(o,e)=>{try{console.log(`ipcHandlers: Getting note by id ${e}`);const t=E.findById(e);return console.log("ipcHandlers: Got note:",t),t}catch(t){throw console.error(`Error getting note by id ${e}:`,t),t instanceof Error&&(console.error("Error message:",t.message),console.error("Error stack:",t.stack)),t}}),a.ipcMain.handle("notes:create",async(o,e)=>{try{if(console.log("ipcHandlers: Creating note:",e),!e)throw new Error("Note object is undefined or null");if(!e.title)throw new Error("Note title is required");e.content===void 0&&(e.content=""),e.tags||(e.tags=[]),console.log("ipcHandlers: Validated note:",e);const t=E.create(e);return console.log("ipcHandlers: Note created:",t),t}catch(t){throw console.error("Error creating note:",t),t instanceof Error&&(console.error("Error message:",t.message),console.error("Error stack:",t.stack)),t}}),a.ipcMain.handle("notes:update",async(o,e,t)=>{try{return E.update(e,t)}catch(r){throw console.error(`Error updating note ${e}:`,r),r}}),a.ipcMain.handle("notes:delete",async(o,e)=>{try{return E.delete(e)}catch(t){throw console.error(`Error deleting note ${e}:`,t),t}}),a.ipcMain.handle("notes:export",async()=>{try{const{filePath:o}=await a.dialog.showSaveDialog({title:"Export Notes",defaultPath:"memoka-notes.json",filters:[{name:"JSON Files",extensions:["json"]}]});return o?(await M.exportNotes(o),!0):!1}catch(o){throw console.error("Error exporting notes:",o),o}}),a.ipcMain.handle("notes:import",async()=>{try{const{filePaths:o}=await a.dialog.showOpenDialog({title:"Import Notes",filters:[{name:"JSON Files",extensions:["json"]}],properties:["openFile"]});return o.length===0?[]:await M.importNotes(o[0])}catch(o){throw console.error("Error importing notes:",o),o}}),a.ipcMain.handle("notes:exportAsMarkdown",async(o,e)=>{try{const{filePath:t}=await a.dialog.showSaveDialog({title:"Export Note as Markdown",defaultPath:`${e.title}.md`,filters:[{name:"Markdown Files",extensions:["md"]}]});return t?(await M.exportNoteAsMarkdown(e,t),!0):!1}catch(t){throw console.error("Error exporting note as markdown:",t),t}}),a.ipcMain.handle("notes:importMarkdown",async()=>{try{const{filePaths:o}=await a.dialog.showOpenDialog({title:"Import Markdown",filters:[{name:"Markdown Files",extensions:["md"]}],properties:["openFile","multiSelections"]});if(o.length===0)return[];const e=[],t=require("fs"),r=require("path"),{markdownToHtml:n}=require("../../renderer/utils/markdownUtils");for(const s of o){const c=t.readFileSync(s,"utf-8"),p=r.basename(s,".md"),g=n(c),w=E.create({title:p,content:g,tags:["imported"]});e.push(w)}return e}catch(o){throw console.error("Error importing markdown:",o),o}}),a.ipcMain.handle("notes:uploadImage",async()=>{try{const{app:o}=require("electron"),e=require("fs"),t=require("path"),{filePaths:r}=await a.dialog.showOpenDialog({title:"Upload Image",filters:[{name:"Images",extensions:["jpg","jpeg","png","gif","svg"]}],properties:["openFile"]});if(r.length===0)return null;const n=r[0],s=t.basename(n),c=t.join(o.getPath("userData"),"images");await e.promises.mkdir(c,{recursive:!0});const p=t.join(c,s);return await e.promises.copyFile(n,p),{filePath:`file://${p}`,fileName:s}}catch(o){throw console.error("Error uploading image:",o),o}})}C.createRequire(typeof document>"u"?require("url").pathToFileURL(__filename).href:m&&m.tagName.toUpperCase()==="SCRIPT"&&m.src||new URL("main.js",document.baseURI).href);const A=d.dirname(x.fileURLToPath(typeof document>"u"?require("url").pathToFileURL(__filename).href:m&&m.tagName.toUpperCase()==="SCRIPT"&&m.src||new URL("main.js",document.baseURI).href));process.env.APP_ROOT=d.join(A,"..");const b=process.env.VITE_DEV_SERVER_URL,B=d.join(process.env.APP_ROOT,"dist-electron"),_=d.join(process.env.APP_ROOT,"dist");process.env.VITE_PUBLIC=b?d.join(process.env.APP_ROOT,"public"):_;let y,R=null;function P(){y=new a.BrowserWindow({icon:d.join(process.env.VITE_PUBLIC,"electron-vite.svg"),width:1200,height:800,webPreferences:{preload:d.join(A,"preload.mjs"),nodeIntegration:!1,contextIsolation:!0}}),b?(y.loadURL(b),y.webContents.openDevTools()):y.loadFile(d.join(_,"index.html"))}function G(){try{console.log("Initializing database..."),R=f.getInstance(),console.log("Database initialized successfully"),console.log("Setting up IPC handlers..."),W(),console.log("IPC handlers set up successfully")}catch(o){console.error("Error during initialization:",o)}}a.app.on("window-all-closed",()=>{process.platform!=="darwin"&&(R&&(R.close(),R=null),a.app.quit(),y=null)});a.app.on("activate",()=>{a.BrowserWindow.getAllWindows().length===0&&P()});a.app.whenReady().then(()=>{G(),P()});exports.MAIN_DIST=B;exports.RENDERER_DIST=_;exports.VITE_DEV_SERVER_URL=b;
